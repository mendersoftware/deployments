// Copyright 2020 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package mocks

import context "context"
import io "io"
import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deployments/model"

import time "time"

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, objectId
func (_m *FileStorage) Delete(ctx context.Context, objectId string) error {
	ret := _m.Called(ctx, objectId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, objectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, objectId
func (_m *FileStorage) Exists(ctx context.Context, objectId string) (bool, error) {
	ret := _m.Called(ctx, objectId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, objectId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequest provides a mock function with given fields: ctx, objectId, duration, responseContentType
func (_m *FileStorage) GetRequest(ctx context.Context, objectId string, duration time.Duration, responseContentType string) (*model.Link, error) {
	ret := _m.Called(ctx, objectId, duration, responseContentType)

	var r0 *model.Link
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *model.Link); ok {
		r0 = rf(ctx, objectId, duration, responseContentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, string) error); ok {
		r1 = rf(ctx, objectId, duration, responseContentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequest provides a mock function with given fields: ctx, objectId, duration
func (_m *FileStorage) DeleteRequest(ctx context.Context, objectId string, duration time.Duration) (*model.Link, error) {
	ret := _m.Called(ctx, objectId, duration)

	var r0 *model.Link
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *model.Link); ok {
		r0 = rf(ctx, objectId, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, objectId, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastModified provides a mock function with given fields: ctx, objectId
func (_m *FileStorage) LastModified(ctx context.Context, objectId string) (time.Time, error) {
	ret := _m.Called(ctx, objectId)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Time); ok {
		r0 = rf(ctx, objectId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRequest provides a mock function with given fields: ctx, objectId, duration
func (_m *FileStorage) PutRequest(ctx context.Context, objectId string, duration time.Duration) (*model.Link, error) {
	ret := _m.Called(ctx, objectId, duration)

	var r0 *model.Link
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *model.Link); ok {
		r0 = rf(ctx, objectId, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, objectId, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadArtifact provides a mock function with given fields: ctx, objectId, artifactSize, artifact, contentType
func (_m *FileStorage) UploadArtifact(ctx context.Context, objectId string, artifact io.Reader, contentType string) error {
	ret := _m.Called(ctx, objectId, artifact, contentType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, string) error); ok {
		r0 = rf(ctx, objectId, artifact, contentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *FileStorage) GetBucketRegion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
