variables:
  DOCKER_REPOSITORY: mendersoftware/deployments

stages:
  - test_prep
  - test
  - build
  - publish

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-lint.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-unittests.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-docker-acceptance.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-docker-build.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

test:acceptance_tests:
  script:
    - rm -f tests/coverage-acceptance*.txt
    - export TESTS_DIR=$(pwd)/tests
    - export INTEGRATION_DIR=$(pwd)/mender-integration
    - |
      for compose in $TESTS_DIR/docker-compose*.yml; do
        $TESTS_DIR/run-test-environment acceptance $INTEGRATION_DIR $compose;
      done
  after_script:
    - set -- tests/coverage-acceptance@*.txt
    - head -n 1 $1 > tests/coverage-acceptance.txt
    - |
      for cover in $@; do
        tail -n +2 $cover >> tests/coverage-acceptance.txt;
      done

# FIXME Revert the image overrides once templates in mendertesting is updated
test:static:
  image: golangci/golangci-lint:v1.47.3

test:govendor-check:
  variables:
    GOLANG_VERSION: "1.18"
  image: golang:${GOLANG_VERSION}

test:unit:
  image: golang:1.18

publish:acceptance:
  image: golang:1.18-alpine3.16

publish:unittests:
  image: golang:1.18-alpine3.16

test:validate-open-api:
  tags:
    - mender-qa-worker-generic-light
  stage: test
  image:
    name: alpine
  before_script:
    - apk --update add curl
    - curl -L https://raw.github.com/stoplightio/spectral/master/scripts/install.sh -o install.sh
    - sh install.sh
  script:
    - |
      echo "extends: ['spectral:oas']" > .spectral.yaml
    - spectral lint -D -f junit -o spectral-report.xml docs/*.yml
  allow_failure: true
  artifacts:
    when: always
    expire_in: 2 weeks
    reports:
      junit: $CI_PROJECT_DIR/spectral-report.xml

