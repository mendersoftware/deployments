language: go

# Forces travis to use VM insted container, required to be able to build containers.
sudo: required


# related to mongodb as per:
# https://github.com/travis-ci/travis-ci/issues/5948
group: edge

services:
    - docker
    - mongodb

# Golang version matrix
go:
    - 1.6

addons:
    #Add alias to localhost, required for fakes3
    hosts:
        - mender-artifact-storage.localhost

env:
    global:
        # Repository token for code coverage reports. Can be regenerated is nesesary.
        # Token is defined per github repository, generated by coveralls.io
        # Not needed for public repository.
        - COVERALLS_TOKEN=9SL1kR7ShEXwJyxZrk7JI01sWxTnMMzCC

        # Should be encrypted or set as private travis variables (in travis settings):
        # AWS_ACCESS_KEY_ID
        # AWS_SECRET_ACCESS_KEY
        # GITHUB_RELEASE_TOKEN
        # DOCKER_HUB_EMAIL
        # DOCKER_HUB_USERNAME
        # DOCKER_HUB_PASSWORD

        # AWS S3 bucket name, need to have access setup.
        # Can be overridden by travis private variable set in travis settings: AWS_BUCKET_OVERRIDE
        - AWS_BUCKET_DEFAULT=mender-buildsystem

        # AWS region.
        # Can be overridden by travis private variable set in travis settings: AWS_REGION_OVERRIDE
        - AWS_REGION_DEFAULT=eu-west-1

        # AWS S3 ACL for build artifacts.
        # Valid ACL values are: private, public_read, public_read_write, authenticated_read,
        # bucket_owner_read, bucket_owner_full_control.
        # Can be overridden by travis private variable set in travis settings: AWS_S3_ACL_OVERRIDE
        - AWS_S3_ACL_DEFAULT=private

        # Perform deployment steps if the build is performed for build: user/repo_name
        # $TRAVIS_REPO_SLUG could be used if want to perform deploy on any repo.
        # Currently perform deployment steps only of building main repository.
        # Can be overridden by travis private variable set in travis settings: DEPLOY_REPO_OVERRIDE
        - DEPLOY_REPO_DEFAULT=mendersoftware/deployments

        # Default configuration file (to be uploaded to S3 and Github Release).
        - CONFIG_FILE=config.yaml

        # Binary name to be uploaded to github release.
        - GITHUB_RELEASE_BINARY=deployments

        # Build artifacts list, fomat: "file1 file2 ./dir/file3"
        # Can be overridden by travis private variable set in travis settings: BUILD_ARTIFATS_OVERRIDE
        - BUILD_ARTIFATS_DEFAULT="deployments"

        # Docker repository name
        - DOCKER_REPOSITORY="mendersoftware/deployments"

        # INTERNAL VARIABLES (for default/overrite management)
        - AWS_BUCKET=${AWS_BUCKET_OVERRIDE:-$AWS_BUCKET_DEFAULT}
        - AWS_REGION=${AWS_REGION_OVERRIDE:-$AWS_REGION_DEFAULT}
        - AWS_S3_ACL=${AWS_S3_ACL_OVERRIDE:-$AWS_S3_ACL_DEFAULT}
        - DEPLOY_REPO=${DEPLOY_REPO_OVERRIDE:-$DEPLOY_REPO_DEFAULT}
        - BUILD_ARTIFATS=${BUILD_ARTIFATS_OVERRIDE:-$BUILD_ARTIFATS_DEFAULT}

before_install:
    # MEN-586
    - sudo service mongod start

    # Install code coverage / coveralls tooling
    - go get -u github.com/axw/gocov/gocov
    - go get -u github.com/mattn/goveralls
    - go get -u golang.org/x/tools/cmd/cover

    # Merge all subpackage code coverage reports into a single report
    - go get -u github.com/modocache/gover

    # Install cyclomatic dependency analysis tool
    - go get -u github.com/fzipp/gocyclo

    # Install fakes3
    - gem install fakes3

    # Install mongo 3.2
    - sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
    - echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
    - sudo apt-get -qq update
    - sudo apt-get install -y mongodb-org


before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # Test if code was formatted with 'go fmt'
    # Command will format code and return modified files
    # fail if any have been modified.
    - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi

    # Perform static code analysys
    - go vet `go list ./... | grep -v vendor`

    # Fail builds when the cyclomatic complexity reaches 15 or more
    - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`



script:
    # go list supply import paths for all sub directories.
    # Exclude vendor directory, we don't want to run tests and coverage for all dependencies every time,
    # also including their coverage may introduce to much noice. Concentrate on the coverage of local packages.
    # Execute go test on every local subpackage (resolved as dependencies) and generate covreage report for each.
    # Test packages pararell (xargs -P)
    - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=count -coverprofile=../../../{}/profile.coverprofile {}

    # Insert build information into compiled binary using ldflags
    - CGO_ENABLED=0 go build -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`"

    # Start test environment
    - bash ./tests/testenv.sh

    # Only install acceptance testing dependencies after License checking is complete
    - npm install validator chance jasmine-node frisby

    # Run acceptance tests
    - jasmine-node ./tests/images/

    # Build docker image from docker file
    - sudo docker build -t $DOCKER_REPOSITORY .

after_success:
    # Merge all coverage reports located in subdirectories and put them under: gover.coverprofile
    - gover

    # Send code coverage report to coveralls.io
    # Requires COVERALLS_TOKEN environment variable set.
    - goveralls -service=travis-pro -coverprofile=gover.coverprofile

    # Make build directory and copy all artifacts to this directory.
    - mkdir build
    - cp $BUILD_ARTIFATS $CONFIG_FILE build/

before_deploy:
    # Master is always lastest
    - if [ ! -z "$TRAVIS_TAG" ]; then export IMAGE_TAG=$TRAVIS_TAG; else export IMAGE_TAG=$TRAVIS_BRANCH; fi
    - docker tag -f $DOCKER_REPOSITORY $DOCKER_REPOSITORY:$IMAGE_TAG

    # Upload image to docker registry only on PUSH
    - docker login --email=$DOCKER_HUB_EMAIL --username=$DOCKER_HUB_USERNAME --password=$DOCKER_HUB_PASSWORD

    # Set latest tag only for HEAD of master branch
    - if [ "$TRAVIS_BRANCH" = "master" ]; then docker push $DOCKER_REPOSITORY:latest; fi
    - docker push $DOCKER_REPOSITORY:$IMAGE_TAG

deploy:
    # In case tag is set. Deploy build as github release.
    # List of files to be uploaded need to be specified in 'file' field
    -
        provider: releases
        api_key: $GITHUB_RELEASE_TOKEN
        file:
            -$GITHUB_RELEASE_BINARY
            -$CONFIG_FILE
        skip_cleanup: true
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy tag builds to S3 in structure /user/repo/release/tag/os_arch/
    -
        provider: s3
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/release/$TRAVIS_TAG/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy all development builds to S3 in structure /user/repo/dev/branch/build/os_arch/
    -
        provider: s3
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/dev/$TRAVIS_BRANCH/$TRAVIS_BUILD_NUMBER/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: false
            all_branches: true

    # Deploy all builds to S3 as latest folder /user/repo/latest/branch/os_arch
    -
        provider: s3
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/latest/$TRAVIS_BRANCH/`go env GOOS`_`go env GOARCH`
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
